The Renderer is running on a separate thread where it manages RenderContexts, the GL context, and the RenderResources that need to be built within the GL context via the RenderResourceManager. As RenderResources are generated on the Renderer they will be kept alive in the GL context for as long as they're needed, even if the GL context disappears and they have to be rebuilt.

A RenderContext needs to be generated before attempting to draw anything. The RenderStart and RenderEnd methods are then used to mark the start and end of drawing using a particular RenderContext. Between these calls, a thread may fill the RenderContext's RenderPipeline with RenderElements which will be processed on the render thread after RenderEnd has been called. Any number of RenderContexts may be drawn to in parallel, but the Renderer will make a thread wait if it attempts to draw using a RenderContext that has not yet had its RenderEnd request processed.
